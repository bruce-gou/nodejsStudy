入口文件中：
	//连接数据库
	var mongoose = require('mongoose');
	mongoose.connect('mongodb://localhost/imooc')


Schema 模式 --定义字段

 	var mongoose = require('mongoose ');
	var schemas = new mongoose.Schema({
		pwd:string,
		user:Number,
		meta:{
		    createAt:{
		        type:Date,
		        default:Date.now()
		    },
		    updateAt:{
		        type:Date,
		        default:Date.now()
		    }
		}
	})
	//每次存数据的时候判断是否是新数据--赋值新增时间/更新时间
	schemas.pre('save',function(next){
		if(this.isNew){
		    this.meta.createAt = this.meta.updateAt = Date.now();
		}else{
		    this.meta.updateAt = Date.now()
		}
		next();//才会执行下去
	})
	schemas.statics = { //静态方法
		fetch:function(cb){
			return this
			.find({})
			.sort('time') //--根据什么排序
			exex(cb)  //执行回调
		},
		findById:function(id,cb){
			return this
			.findOne({_id:id})
			exex(cb)  //执行回调
		}
	}
	module.exports = schemas; //导出模式

Model 模型  --对传入的Scheme进行编译

 	var mongoose = require('mongoose ');
	var Movie = mongoose.Model({
		‘Movie’,
		schemas 
	})
	module.exports = Movie; //导出模式
Documents 文档实例化
	var Movie = require('./models/movie'); //引入模型
	var movie = new Movie({
		title:'机械战警',
		doctor:'何塞',
		year:2018
	})
	movie.save(function(err){
		if(err) return handleError(err)
	})

查询
	var Movie = require('./models/movie');
	
	app.get('/',function(req,res){
		Movie
			.find({}) //多条查询
			.findOne({_id:id}) //多条查询
			.exec(function(err,data){
				res.render('index',{
					title:'首页’,
					movies:data
				})
			})
	})
删除
	app.get('/',function(req,res){
		Movie
			.remove({_id:id},function(err,data){
				if(err){
				console.log(err);
				}
			})
	})
	

